Angular - The Complete Guide (2024 Edition)

#? Section - 1 : Setting up Angular Development Environment
1. Install Node.js to get npm and set node versions using nvm.
2. Install Angular CLI with `npm install -g @angular/cli`.
3. Install VS Code extensions for Angular.
4. Create a new project with `ng new first-angular-app`.

------------------------------------------------------

#? Section - 2 : Angular Essentials (Components, Templates, Services, etc.)
We will learn about:
a) Angular Project Structure
b) Working with Components
c) Handling User Events
d) Rendering & Updating Dynamic UI Content

#! Analyzing the Angular Project Structure
1. The root directory of the project contains configuration files such as `angular.json`, `tsconfig.json` and `package.json`.
2. src directory contains all the source code files. index.html is the main entry point of the application. styles.css is the main CSS file. main.ts is the main TypeScript file which is very important as it is the first code file to be executed when your angular application starts.
3. assets directory contains all the static assets such as images, fonts, etc.

#! Understanding Components and how contents ends up on the screen
1. index.html gets its custom components tags from main.ts file. The main.ts imports the required components from the app directory. The app directory contains all the components inside app.components.ts file.
** app.components.ts file:**
```
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';

#! @Component is a decorator used to add metadata about the component.
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'first-angular-app';
}
```

**NOTE** => First design your page and split the parts into building blocks i.e components
The idea is to build those building blocks as individual Components and to then compose them together to get the overall UI.

#! Creating a first custom component (Header Component)
1. The first component we will build is the Header Componnent
2. Create a new component by using the command `ng g c header` or `ng generate component header`
3. For this course, rather that using the command, we will create a file inside app directory named header.component.ts
4. This will be the basic template for any custom component.
```
import { Component } from '@angular/core';

@Component({
    
})

export class HeaderComponent {}
```
5. Also create a file inside app directory named header.component.html and header.component.css
**header.component.html:**
```
<header>
    <h1>EasyTask</h1>
</header>
```

**header.component.ts:**
```
import { Component } from '@angular/core';

@Component({
    selector: 'app-header', //! selector is used to select this component as a HTML element tag in the HTML file
    standalone: true, //! standalone is used to tell Angular that this component is a standalone component and not a module component
    //! template: '<h1>Hello Angular</h1>',
    templateUrl: './header.component.html', //! templateUrl is used to specify the location of the template file
    styleUrls: ['./header.component.css'] //! styleUrls is used to specify the location of the CSS file
})

export class HeaderComponent {}
```

#! Using the custom component (Header Component)
#* Approach - 1 ( Not recommended )
1. Go to main.ts and import and add the custom component to the bootstrapApplication
2. Now go to index.html and use the custom component

#* Approach - 2
1. Add the custom component to the app.components.ts file and then go to app.components.html file
2. Add the custom component to the imports statement
**app.components.ts:**
```
import { Component } from '@angular/core';

import { HeaderComponent } from './header.component';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [HeaderComponent],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {}
```

**app.components.html:**
```
<app-header></app-header>
```

#! Styling the header component & adding an image
1. Go to angular.json and confirm that you have a assets section like this, else add your assets section otherwise your images will not be loaded
"
"assets": [
  "src/favicon.ico",
  "src/assets"
],
"

#! Managing and Creating Components with the Angular CLI
# Approach - 1
1. Create a header directory inside the app directory and move all the header files inside it.
# Approach - 2
2. Use the Angular CLI command `ng g c header` or `ng generate component header` to generate the header component

#! Styling and using our next custom component ( User Component )
1. Add the css code to the css file and use the custom component (User Component) in the html file.

#! Preparing User Data (To output dynamic content)
1. Create a dummy-users.ts file in the app directory which should contain some dummy data.
2. Now our goal is to get a random user from the dummy-users.ts file and display it on the screen from user.component.html

#! Storing Data in a Component Class
1. Inside the user.component.ts file, get random user from dummy-users.ts file. The selectedUser should be set inside the export statement so that we can use it in the template of that component.
** user.component.ts:**
```
import { Component } from '@angular/core';
import { DUMMY_USERS } from '../dummy-users';

const randomIndex = Math.floor(Math.random() * DUMMY_USERS.length);

@Component({
  selector: 'app-user',
  standalone: true,
  imports: [],
  templateUrl: './user.component.html',
  styleUrl: './user.component.css'
})

//! Variables outside the export class component needs data type to be defined like let vat const but inside the export class component, just type the variable name.
export class UserComponent {
  selectedUser = DUMMY_USERS[randomIndex]; // Advantage of doing this is that we can now access this selectedUser inside the template of this component.

  // private selectedUser = DUMMY_USERS[randomIndex]; //! Setting it private means this is accessible only inside this class and not in template
  // public selectedUser = DUMMY_USERS[randomIndex]; //! Setting it public means this is accessible in template. This is by default.
}

```

#! Outputting Dynamic Content with String Interpolation
** user.component.html:**
```
<div>
    <button>
        <img src="" alt="">
        <!-- <span>NAME</span> -->
        <span>{{ selectedUser.name }}</span>
    </button>
</div>
```

#! Property Binding & Outputting Computed Values
** user.component.html:**
```
<div>
    <button>
        <img [src]="'assets/users/' + selectedUser.avatar" [alt]="selectedUser.avatar">
        <!-- <img src="" alt=""> -->
        <!-- <span>NAME</span> -->
        <span>{{ selectedUser.name }}</span>
    </button>
</div>
```

#! Using Getters for computed values
** user.component.ts:**
```
import { Component } from '@angular/core';
import { DUMMY_USERS } from '../dummy-users';

const randomIndex = Math.floor(Math.random() * DUMMY_USERS.length);

@Component({
  selector: 'app-user',
  standalone: true,
  imports: [],
  templateUrl: './user.component.html',
  styleUrl: './user.component.css'
})

//! Variables outside the export class component needs data type to be defined like let vat const but inside the export class component, just type the variable name.
export class UserComponent {
  selectedUser = DUMMY_USERS[randomIndex]; // Advantage of doing this is that we can now access this selectedUser inside the template of this component.

  // private selectedUser = DUMMY_USERS[randomIndex]; //! Setting it private means this is accessible only inside this class and not in template
  // public selectedUser = DUMMY_USERS[randomIndex]; //! Setting it public means this is accessible in template

  //! This is a getter
  get imagePath() {
    // return 'assets/users/' + this.selectedUser.avatar
    return `assets/users/${this.selectedUser.avatar}`
  }
}
```

** user.component.html:**
```
<div>
    <button>
        <img [src]="imagePath" [alt]="selectedUser.avatar">
        <!-- <img src="" alt=""> -->
        <!-- <span>NAME</span> -->
        <span>{{ selectedUser.name }}</span>
    </button>
</div>
```

#! Event Listeners with Event Binding
1. Add the event listener to any HTML element using `()`. There are various types of event listeners => (click), (mousedown), (keydown), (mouseenter), (mouseleave), (mouseover), (mouseout), (mouseover), (mouseup), (touchstart), (touchend), (touchmove), (touchcancel), (scroll), etc
** user.component.html:**
```
<div>
    <button (click)="onSelectUser()">
        <img [src]="imagePath" [alt]="selectedUser.avatar">
        <span>{{ selectedUser.name }}</span>
    </button>
</div>
```
** user.component.ts:**
```
import { Component } from '@angular/core';
import { DUMMY_USERS } from '../dummy-users';

const randomIndex = Math.floor(Math.random() * DUMMY_USERS.length);

@Component({
  selector: 'app-user',
  standalone: true,
  imports: [],
  templateUrl: './user.component.html',
  styleUrl: './user.component.css'
})

//! Variables outside the export class component needs data type to be defined like let vat const but inside the export class component, just type the variable name.
export class UserComponent {
  selectedUser = DUMMY_USERS[randomIndex]; // Advantage of doing this is that we can now access this selectedUser inside the template of this component.

  // private selectedUser = DUMMY_USERS[randomIndex]; //! Setting it private means this is accessible only inside this class and not in template
  // public selectedUser = DUMMY_USERS[randomIndex]; //! Setting it public means this is accessible in template

  //! This is a getter
  get imagePath() {
    // return 'assets/users/' + this.selectedUser.avatar
    return `assets/users/${this.selectedUser.avatar}`
  }

  onSelectUser() {
    console.log('User selected: ' + this.selectedUser.name);
  }
}
```

#! Managing State and Changing Data
** user.component.ts:**
```
onSelectUser() {
    // console.log('User selected: ' + this.selectedUser.name);
    const randomIndex = Math.floor(Math.random() * DUMMY_USERS.length);
    this.selectedUser = DUMMY_USERS[randomIndex];
  }
```
* So now when the user clicks on the button, the selectedUser is changed to a random user from the dummy-users array. Here the state of the app is changed.

NOTE: Read about Angular's Change Detection Mechanism using Zone.js. or rewatch lec 27.

#! Introducing Signals
** user.component.ts:**
"
import { Component, computed, signal } from '@angular/core';
import { DUMMY_USERS } from '../dummy-users';

const randomIndex = Math.floor(Math.random() * DUMMY_USERS.length);

@Component({
  selector: 'app-user',
  standalone: true,
  imports: [],
  templateUrl: './user.component.html',
  styleUrl: './user.component.css'
})

export class UserComponent {
  // selectedUser = DUMMY_USERS[randomIndex]; // Advantage of doing this is that we can now access this selectedUser inside the template of this component.
  selectedUser = signal(DUMMY_USERS[randomIndex]); //! using signals for state management
  imagePath = computed(() => `assets/users/${this.selectedUser().avatar}`); //! using computed for state management which uses signals under the hood

  //! This is a getter
  // get imagePath() {
  //   return `assets/users/${this.selectedUser.avatar}`
  // }

  onSelectUser() {
    const randomIndex = Math.floor(Math.random() * DUMMY_USERS.length);
    // this.selectedUser = DUMMY_USERS[randomIndex];
    this.selectedUser.set(DUMMY_USERS[randomIndex]); //! using signal's set method
  }
}
"
** user.component.html:**
```
<div>
    <button (click)="onSelectUser()">
        <img [src]="imagePath()" [alt]="selectedUser().avatar">
        <span>{{ selectedUser().name }}</span>
    </button>
</div>
```

#! Defining Component Inputs
* Now rather than sending data from the user template to the user component, we rather now send data from the app component to the app template which is then passed to the user component as an attribute like we used to do with props. That data is then recieved by the user component and sent to the user template.
** app.component.ts:**
```
import { Component } from '@angular/core';

import { HeaderComponent } from './header/header.component';
import { UserComponent } from "./user/user.component";
import { DUMMY_USERS } from './dummy-users';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [HeaderComponent, UserComponent],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {
  users = DUMMY_USERS;
}
```
** app.component.html:**
```
<!-- <header>
  <img src="assets/angular-logo.png" alt="The Angular logo: The letter 'A'" />
  <h1>Let's get started!</h1>
  <p>Time to learn all about Angular!</p>
</header> -->
<app-header></app-header>
<main>
  <ul id="users">
    <li>
      <app-user [avatar]="users[0].avatar" [name]="users[0].name"></app-user>
    </li>
    <li>
      <app-user [avatar]="users[1].avatar" [name]="users[1].name"/>
    </li>
    <li>
      <app-user [avatar]="users[2].avatar" [name]="users[2].name"/>
    </li>
    <li>
      <app-user [avatar]="users[3].avatar" [name]="users[3].name"/>
    </li>
  </ul>
</main>
```
** user.component.ts:**
```
import { Component, computed, Input, signal } from '@angular/core';

@Component({
  selector: 'app-user',
  standalone: true,
  imports: [],
  templateUrl: './user.component.html',
  styleUrl: './user.component.css'
})

export class UserComponent {
  //! Input decorator is used to receive data from the parent component to this child component
  @Input() avatar!: string;
  @Input() name!: string;

  get imagePath() {
    return `assets/users/${this.avatar}`
  }

  onSelectUser() {
    
  }
}
```
** user.component.html:**
```
<div>
    <button (click)="onSelectUser()">
        <img [src]="imagePath" [alt]="avatar">
        <span>{{ name }}</span>
    </button>
</div>
```